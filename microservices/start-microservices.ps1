# Script de d√©marrage automatique des microservices
# Usage: .\start-microservices.ps1

Write-Host "üöÄ D√©marrage des microservices..." -ForegroundColor Green
Write-Host ""

# Fonction pour d√©marrer un service dans un nouveau terminal
function Start-Service {
    param(
        [string]$ServiceName,
        [string]$Path,
        [string]$Port
    )
    
    Write-Host "‚ñ∂Ô∏è  D√©marrage de $ServiceName (Port $Port)..." -ForegroundColor Cyan
    
    $command = "cd '$Path'; npm start; Read-Host 'Appuyez sur Entr√©e pour fermer'"
    Start-Process powershell -ArgumentList "-NoExit", "-Command", $command
    
    Start-Sleep -Seconds 2
}

# R√©cup√©rer le chemin du dossier microservices
$microservicesPath = Split-Path -Parent $MyInvocation.MyCommand.Path

# V√©rifier si npm est install√©
try {
    npm --version | Out-Null
} catch {
    Write-Host "‚ùå Erreur: npm n'est pas install√©" -ForegroundColor Red
    exit 1
}

Write-Host "üì¶ V√©rification des d√©pendances..." -ForegroundColor Yellow
Write-Host ""

# Installer les d√©pendances si n√©cessaire
$services = @(
    @{Name="API Gateway"; Path="api-gateway"; Port="5000"},
    @{Name="Service D√©partements"; Path="service-departements"; Port="5001"},
    @{Name="Service Sp√©cialit√©s"; Path="service-specialites"; Port="5002"},
    @{Name="Service Mati√®res"; Path="service-matieres"; Port="5003"},
    @{Name="Service Groupes"; Path="service-groupes"; Port="5004"},
    @{Name="Service Salles"; Path="service-salles"; Port="5005"}
)

foreach ($service in $services) {
    $servicePath = Join-Path $microservicesPath $service.Path
    $nodeModulesPath = Join-Path $servicePath "node_modules"
    
    if (-not (Test-Path $nodeModulesPath)) {
        Write-Host "üì• Installation des d√©pendances pour $($service.Name)..." -ForegroundColor Yellow
        Push-Location $servicePath
        npm install --silent
        Pop-Location
    }
}

Write-Host ""
Write-Host "‚úÖ Toutes les d√©pendances sont install√©es" -ForegroundColor Green
Write-Host ""
Write-Host "üé¨ Lancement des services..." -ForegroundColor Green
Write-Host ""

# D√©marrer tous les services
foreach ($service in $services) {
    $servicePath = Join-Path $microservicesPath $service.Path
    Start-Service -ServiceName $service.Name -Path $servicePath -Port $service.Port
}

Write-Host ""
Write-Host "‚ú® Tous les services sont en cours de d√©marrage !" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Services disponibles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API Gateway:           http://localhost:5000" -ForegroundColor White
Write-Host "   ‚Ä¢ Service D√©partements:  http://localhost:5001" -ForegroundColor White
Write-Host "   ‚Ä¢ Service Sp√©cialit√©s:   http://localhost:5002" -ForegroundColor White
Write-Host "   ‚Ä¢ Service Mati√®res:      http://localhost:5003" -ForegroundColor White
Write-Host "   ‚Ä¢ Service Groupes:       http://localhost:5004" -ForegroundColor White
Write-Host "   ‚Ä¢ Service Salles:        http://localhost:5005" -ForegroundColor White
Write-Host ""
Write-Host "üè• Health Checks:" -ForegroundColor Cyan
Write-Host "   curl http://localhost:5000/health" -ForegroundColor Gray
Write-Host ""
Write-Host "‚è∏Ô∏è  Pour arr√™ter tous les services, fermez toutes les fen√™tres PowerShell" -ForegroundColor Yellow
Write-Host ""

# Attendre quelques secondes puis v√©rifier les health checks
Start-Sleep -Seconds 10

Write-Host "üîç V√©rification des services..." -ForegroundColor Yellow
Write-Host ""

foreach ($service in $services) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:$($service.Port)/health" -TimeoutSec 2 -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $($service.Name) is UP" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è  $($service.Name) is not responding yet..." -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üéâ Architecture microservices pr√™te !" -ForegroundColor Green
Write-Host ""
